AWSTemplateFormatVersion: "2010-09-09"

Resources:
  FrontendBucket:
    Type: AWS::S3::Bucket

    Properties:
      BucketName: !Sub "${AWS::AccountId}-frontend-s3"
      WebsiteConfiguration:
        IndexDocument: index.html

      # Block all public access:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy

    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub "arn:aws:s3:::${FrontendBucket}/*"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution

    Properties:
      DistributionConfig:
        Comment: "Frontend CloudFront Distribution"
        Origins:
          - DomainName: !GetAtt FrontendBucket.DomainName
            Id: S3Origin
            OriginAccessControlId: !Ref CloudFrontOAC
            S3OriginConfig: {} # required when usings S3 as origin
        Enabled: true # enables the distribution to be active

        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: false
        PriceClass: PriceClass_100

        CustomErrorResponses:
          - ErrorCode: 403
            ResponsePagePath: "/index.html"
            ResponseCode: 200

  CloudFrontOAC:
    Type: AWS::CloudFront::OriginAccessControl

    Properties:
      OriginAccessControlConfig:
        Name: "OAC for Frontend S3"
        Description: "Allows CloudFront to access the S3 bucket"
        SigningProtocol: sigv4
        SigningBehavior: always
        OriginAccessControlOriginType: s3

  FrontendPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: FrontendPipeline
      RoleArn: !GetAtt PipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref FrontendBucket # Store artifacts in the S3 bucket

      Stages:
        - Name: Source
          Actions:
            - Name: GitHubSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: 1
              Configuration:
                ConnectionArn: arn:aws:codeconnections:us-east-1:050752607919:connection/242f5fc5-afd5-4ee5-b6fa-f6201bcc255d
                FullRepositoryId: mohammed-almassri/cloud-final-project-frontend
                BranchName: master
                OutputArtifactFormat: CODE_ZIP
              OutputArtifacts:
                - Name: SourceOutput

        - Name: Build
          Actions:
            - Name: BuildAndDeploy
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref FrontendBuildProject
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput

        - Name: Deploy
          Actions:
            - Name: DeployToS3
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: 1
              Configuration:
                BucketName: !Ref FrontendBucket
                Extract: true
              InputArtifacts:
                - Name: BuildOutput
              RunOrder: 1

            - Name: InvalidateCloudFrontCache
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: 1
              Configuration:
                FunctionName: !Ref CloudFrontInvalidationFunction
              RunOrder: 2

  # CodeBuild Project (To process frontend files)
  FrontendBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: FrontendBuild
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        Type: LINUX_CONTAINER
      Source:
        Type: CODEPIPELINE
      Cache:
        Type: NO_CACHE
      TimeoutInMinutes: 10

  # IAM Role for CodePipeline
  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [codepipeline.amazonaws.com]
            Action: sts:AssumeRole
      Policies:
        - PolicyName: PipelinePermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetBucketLocation
                Resource: !Sub "arn:aws:s3:::${FrontendBucket}/*"
              - Effect: Allow
                Action:
                  - codestar-connections:UseConnection
                Resource: "arn:aws:codeconnections:us-east-1:050752607919:connection/242f5fc5-afd5-4ee5-b6fa-f6201bcc255d"
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - codebuild:ListBuilds
                Resource: arn:aws:codebuild:us-east-1:982534378644:project/FrontendBuild
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:GetFunction
                  - lambda:UpdateFunctionCode
                  - lambda:UpdateFunctionConfiguration
                Resource: !GetAtt CloudFrontInvalidationFunction.Arn

  # IAM Role for CodeBuild
  # (Codebuild is used by the project, the project is used by the pipeline)
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub "arn:aws:s3:::${FrontendBucket}/*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource: "*"

  # CloudFront Cache Invalidation Lambda
  CloudFrontInvalidationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: InvalidateCloudFrontCache
      Runtime: nodejs18.x
      Handler: index.lambdaHandler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          const { CloudFrontClient, CreateInvalidationCommand } = require("@aws-sdk/client-cloudfront");
          const { CodePipelineClient, PutJobSuccessResultCommand, PutJobFailureResultCommand } = require("@aws-sdk/client-codepipeline");
          const crypto = require("crypto");

          const client = new CloudFrontClient({});
          const codePipelineClient = new CodePipelineClient({});
          const time = crypto.randomBytes(8).toString("hex");

          exports.lambdaHandler = async (event) => {
            try {
              const distributionId = process.env.CLOUDFRONT_DISTRIBUTION_ID;
              const jobId = event["CodePipeline.job"]?.id;  // Extract CodePipeline job ID

              const params = {
                DistributionId: distributionId,
                InvalidationBatch: {
                  Paths: {
                    Quantity: 1,
                    Items: ["/*"],
                  },
                  CallerReference: time,
                },
              };

              await client.send(new CreateInvalidationCommand(params));

              if (jobId) {
                await codePipelineClient.send(new PutJobSuccessResultCommand({ jobId }));
                console.log("Reported success to CodePipeline.");
              }
              console.log("CloudFront invalidation created successfully.");

              return {
                statusCode: 200,
                body: JSON.stringify({ 
                  status: "Succeeded",
                  message: "Succeeded" 
                  }),
              };
            } catch (error) {
              console.error("Error creating invalidation:", error);

              if (jobId) {
                await codePipelineClient.send(new PutJobFailureResultCommand({
                    jobId,
                    failureDetails: { message: error.message, type: "JobFailed" }
                }));
              }
              
              return {
                statusCode: 500,
                body: JSON.stringify({ 
                  status: "Failed",
                  error: "Failed to create invalidation." 
                }),
              };
            }
          };
      Environment:
        Variables:
          CLOUDFRONT_DISTRIBUTION_ID: !Ref CloudFrontDistribution

  LambdaExecutionRole:
    Type: AWS::IAM::Role

    Properties:
      RoleName: InvalidateCacheRoleForLambda
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - cloudfront:CreateInvalidation
                Resource: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"
              - Effect: Allow
                Action:
                  - "codepipeline:PutJobSuccessResult"
                  - "codepipeline:PutJobFailureResult"
                Resource: "*"
